
AVRASM ver. 2.1.43  reloj.asm Wed Jan 05 16:33:10 2022

reloj.asm(12): Including file 'm168def.inc'
reloj.asm(15): Including file 'def_equ.inc'
                 
                 
                 /* 
                      * Autor: Adalberto (Toto) Sánchez - 2021.-.-
                      * Dispositivo: ATmega168  - 28 pines DIP.-.-
                      * Objetivo del programa: 
                        - El programa enciende y apaga de manera alternada los pines del puerto B.
                        - La frecuencia está controlada por el timer 1 del MCU.
                        - La INT0 cambia el valor del prescalar entre 8 y 64. 
                 */
                 
                      .list
                      .include "def_equ.inc"
                 
                 .def r_16 = r16
                 .def r_17 = r17
                 .def r_18 = r18
                 .def r_19 = r19
                 .def r_20 = r20
                 .def r_21 = r21
                 .def r_22 = r22
                 .def r_23 = r23
                 .def r_24 = r24
                 .def r_25 = r25
                 
                 /* ****************************************** */
                 
                 .equ cero = ~$ff                              
                 .equ uno = !0
                 .equ _255 = ~cero
                 
                 .equ reloj = 1000000
                 .equ prescalar = 64
                 .equ valor_OCR1A = reloj/prescalar
                  
                 #define clr_reg(a,b)  \
                         clr a##b      \
                         #
                 
                 ; ===========================================
                 
                 .macro off_IRQ                     ;Conseguí que funcionara con esta configuración.-.-
                        .org INT0addr
                        rjmp ISR_INT0
                        reti ; INT1
                 	   reti ; PCI0
                 	   reti ; PCI1
                 	   reti ; PCI2
                 	   reti ; WDT
                 	   reti ; OC2A
                 	   reti ; OC2B
                 	   reti ; OVF2
                 	   reti ; ICP1
                 	   .org OC1Aaddr
                 	   rjmp ISR_OC1A 
                 	   reti ; OC1B
                 	   reti ; OVF1
                 	   reti ; OC0A
                 	   reti ; OC0B
                 	   reti ; OVF0
                 	   reti ; SPI
                 	   reti ; URXC
                 	   reti ; UDRE
                 	   reti ; UTXC
                 	   reti ; ADCC
                 	   reti ; ERDY
                 	   reti ; ACI
                 	   reti ; TWI
                 	   reti ; SPMR
                        exit:
                 .endm  
                 
                 .macro set_stack                   ;Contiene una macro anidada.-.-
                         eor @0,@0
                         ldi @0,byte2(RAMEND)
                         _sp r_16,H
                         ldi @0,low(RAMEND)
                         _sp r_16,L
                         exit:
                 .endm
                 
                 .macro _sp
                         out SP@1,@0
                         exit:
                 .endm
                 
                 .macro _DDR
                        ldi r_17,@1
                        out DDR##@0,r_17
                        exit:
                 .endm 
                 
                 .macro delay
                        clr r_21
                        clr r_22
                        bucle:
                        ldi r_21,@0
                        uno:
                        dec r_21
                        brne uno
                        dos:
                        inc r_22
                        brne bucle
                        exit:
                 .endm
                        
                 
                 
                 
                 
                 
                 
                      .dseg
                      .org 0x100
                      
                      .cseg
                      .org RESET                          ;Configurado así el desplazamiento 0x0000 de la tabla de vectores en m168def.inc.-.-
000000 c04a           rjmp main
000002 c022
000003 9518
000004 9518
000005 9518
000006 9518
000007 9518
000008 9518
000009 9518
00000a 9518
00000b 9518
000016 c028
000017 9518
000018 9518
000019 9518
00001a 9518
00001b 9518
00001c 9518
00001d 9518
00001e 9518
00001f 9518
000020 9518
000021 9518
000022 9518
000023 9518
000024 9518           off_IRQ
                      
                      ISR_INT0:
                      .if (1 << INTF0)
000025 2755
000026 2766
000027 ef5f
000028 955a
000029 f7f1
00002a 9563
00002b f7d9           delay 0xff                          ;Quita el rebote (tiempo establecido 65 milisegundos).-.-
                      .endif
                      .if (1 << INTF0)    
00002c e018           ldi r_17,(1 << WGM12)               ;Establece el modo CTC.-.- 
00002d 3030           cpi r_19,cero
00002e f439           brne prescalar_64
                      prescalar_8:
00002f e002           ldi r_16,1 << CS11                  
000030 0f10           add r_17,r_16 
000031 9310 0081      sts TCCR1B,r_17
000033 d009           rcall limpia_bit
000034 e031           ldi r_19,uno
000035 9518           reti  
                      prescalar_64:
000036 e003           ldi r_16,(1 << CS11) | (1 << CS10)  
000037 0f10           add r_17,r_16 
000038 9310 0081      sts TCCR1B,r_17      
00003a d002           rcall limpia_bit
00003b e030           ldi r_19,!uno
00003c 9518           reti
                      .else
                      .endif 
                      limpia_bit:
00003d 9ae0           sbi EIFR,0
00003e 9508           ret
                                   
                      ISR_OC1A:
                      on:
00003f 3000           cpi r_16,cero
000040 f021           breq off
000041 ea2a           ldi r_18,$AA             
000042 d006           rcall muestra
000043 e000           ldi r_16,uno + -uno
000044 9518           reti
                      off:
000045 9520           com r_18
000046 d002           rcall muestra
000047 e001           ldi r_16,uno
000048 9518           reti
                      muestra:
000049 b925           out PORTB,r_18
00004a 9508           ret
                      
                      main:
00004b 2700
00004c e004
00004d bf0e
00004e ef0f
00004f bf0d           set_stack r_16                      ;Configura la pila.-.-
000050 ef1f
000051 b914           _DDR B,_255                         ;Configura como salida todos los pines del puerto B.-.-
000052 9a5a           sbi PORTD,PORTD2                    ;Pone pullup PD2.-.-        
                      
                      set_INT0:
000053 2711           clr r_17
000054 e012           ldi r_17,1 << ISC01
000055 9310 0069      sts EICRA,r_17                      ;Configura el disparo con la caída del voltaje.-.-
000057 e011           ldi r_17,1 << INT0
000058 bb1d           out EIMSK,r_17                      ;Habilita la INT.-.-
                      
                      set_reloj:
000059 2700           clr r_16
00005a 9300 0085      sts TCNT1H,r_16                     ;Configura a 0 el contador.-.-
00005c 9300 0084      sts TCNT1L,r_16
00005e e009           ldi r_16,byte1(valor_OCR1A)
00005f e31d           ldi r_17,byte2(valor_OCR1A)
000060 9310 0089      sts OCR1AH,r_17                     ;Establece un valor de 15625 (0x3D09) para el emparejamiento.-.-
000062 9300 0088      sts OCR1AL,r_16  
000064 2700           clr r_16
000065 2711           clr r_17
000066 e018           ldi r_17,(1 << WGM12)               ;Establece el modo CTC.-.- 
000067 e003           ldi r_16,(1 << CS11) | (1 << CS10)  ;Establece un prescalar de 64.-.-
000068 0f10           add r_17,r_16 
000069 9310 0081      sts TCCR1B,r_17          
00006b 2711           clr r_17
00006c e012           ldi r_17,1 << OCIE1A
00006d 9310 006f      sts TIMSK1,r_17                     ;Habilita la interrupción por emparejamiento.-.- 
                      
                      set_sleep_mode:                     ;Habilita el modo idle.-.-
00006f e010           ldi r_17,cero
000070 e011           ldi r_17,1 << SE
000071 9310 0033      sts SMCR,r_17
                          
000073 2700           clr_reg(r,_16)
000074 e001           ldi r_16,uno
000075 e020           ldi r_18,!uno
000076 2733           clr_reg(r,_19)
000077 9478           sei
                      
                      bucle:
000078 9588           sleep
000079 0000           nop
00007a cffd           rjmp bucle
                 
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  23 r17:  24 r18:   4 r19:   4 r20:   0 r21:   3 r22:   2 r23:   0 
r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 6 out of 35 (17.1%)

ATmega168 instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :   2 cpse  :   0 dec   :   1 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  23 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :   5 pop   :   0 
push  :   0 rcall :   4 ret   :   2 reti  :  27 rjmp  :   4 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :   0 std   :   0 sts   :  10 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 20 out of 113 (17.7%)

ATmega168 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0000f6    224      0    224   16384   1.4%
[.dseg] 0x000100 0x000100      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
